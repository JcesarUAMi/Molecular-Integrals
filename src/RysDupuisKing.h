#ifndef DKR_H
#define DKR_H

#include <iostream>
#include <vector>
#include <array>
#include <cmath>
#include <iomanip>
#include <cstdlib>
#include "McMurchie.h"
#define SIGN(a,b) ((b) >= 0.0 ? fabs(a) : -fabs(a))

using namespace std;


struct variables {
  vector<float> B;
  vector<float> G;
  vector<float> J;
  vector<float> R;
  vector<float> wi;
};

struct legendreSteps {
  float r[50] = {-0.0156289844215430828722,    -0.0468716824215916316149,
    -0.0780685828134366366948,    -0.1091892035800611150034,
    -0.1402031372361139732075,    -0.1710800805386032748875,
    -0.2017898640957359972360,    -0.2323024818449739696495,
    -0.2625881203715034791689,    -0.2926171880384719647376,
    -0.3223603439005291517225,    -0.3517885263724217209723,
    -0.3808729816246299567634,    -0.4095852916783015425289,
    -0.4378974021720315131090,    -0.4657816497733580422492,
    -0.4932107892081909335693,    -0.5201580198817630566468,
    -0.5465970120650941674680,    -0.5725019326213811913169,
    -0.5978474702471787212648,    -0.6226088602037077716042,
    -0.6467619085141292798326,    -0.6702830156031410158026,
    -0.6931491993558019659486,    -0.7153381175730564464600,
    -0.7368280898020207055124277,   -0.7575981185197071760356680,
    -0.7776279096494954756275514,   -0.7968978923903144763895729,
    -0.8153892383391762543939888,   -0.8330838798884008235429158,
    -0.8499645278795912842933626,   -0.8660146884971646234107400,
    -0.8812186793850184155733168,   -0.8955616449707269866985210,
    -0.9090295709825296904671263,   -0.9216092981453339526669513,
    -0.9332885350430795459243337,   -0.9440558701362559779627747,
    -0.9539007829254917428493369,   -0.9628136542558155272936593,
    -0.9707857757637063319308979,   -0.9778093584869182885537811,
    -0.9838775407060570154961002,   -0.9889843952429917480044187,
    -0.9931249370374434596520099,   -0.9962951347331251491861317,
    -0.9984919506395958184001634,   -0.9997137267734412336782285};

  float w[50] = {0.031255423453863356947642,   0.031224884254849357732376,
    0.031163835696209906783818,   0.031072337427566516587810,
    0.030950478850490988234063,   0.030798379031152590427714,
    0.030616186583980448496460,   0.030404079526454820016508,
    0.030162265105169144919069,   0.029890979593332830916837,
    0.029590488059912642511754,   0.029261084110638276620120,
    0.028903089601125203134876,   0.028516854322395097990937,
    0.028102755659101173317648,   0.027661198220792388294204,
    0.027192613446576880136492,   0.026697459183570962660385,
    0.026176219239545676342309,   0.025629402910208116075642,
    0.025057544481579589703764,   0.024461202707957052719975,
    0.023840960265968205962560,   0.023197423185254121622489,
    0.022531220256336272701797,   0.021843002416247386313954,
    0.021133442112527641542672,   0.020403232646209432766839,
    0.019653087494435305865381,   0.018883739613374904552941,
    0.018095940722128116664391,   0.017290460568323582439344,
    0.016468086176145212643105,   0.015629621077546002723937,
    0.014775884527441301768880,   0.013907710703718772687954,
    0.013025947892971542285558,   0.012131457662979497407745,
    0.011225114023185977117222,   0.010307802574868969585782,
    0.009380419653694457951418,   0.008443871469668971402621,
    0.007499073255464711578829,   0.006546948450845322764152,
    0.005588428003865515157212,   0.004624450063422119351096,
    0.003655961201326375182342,   0.002683925371553482419440,
    0.001709392653518105239530,   0.000734634490505671730406};

  array<float, 50> E;
};

class DKR {
	private:
		McMD MD;
  public:
    variables var;
    legendreSteps leg;
		double l1;
		int Ns;
    float funcQ (int, int, float);
    float funcU (float, float, int);
    void funcG (int);
    void funcB(int);
    void funcJ();
    float pythag(float, float);
    void funcP();
    void shellDstev();
    double DKRrec (int, double, double, float);
    void evalWaR();
    double integrationBielec(int, int, int, int, int, int, int, int, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double);
//    double integrationMonoelec();
//    double recurDKR (int, int, int, int, double, double, double, double, double, double, double, double, double);
};

#endif 

